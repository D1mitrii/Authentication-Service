services:
  auth-app:
    container_name: auth-app
    build:
      context: .
      target: release
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "${HTTP_PORT}:${HTTP_PORT}"
      - "${GRPC_PORT}:${GRPC_PORT}"
      - "${PROMETHEUS_HTTP_PORT}:${PROMETHEUS_HTTP_PORT}"
    networks:
      - database

  prometheus:
    image: prom/prometheus:v2.45.5
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      - ./metrics/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - metrics  

  grafana:
    image: grafana/grafana:10.4.2
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - metrics

  postgres:
    image: postgres:16.2
    container_name: database
    hostname: $$POSTGRES_HOST
    env_file:
      - .env
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - auth-data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - database

  redis:
    image: redis:7.2.4-alpine
    container_name: sessions
    hostname: $$REDIS_HOST
    env_file:
      - .env
    command: redis-server --requirepass "$REDIS_PASSWORD"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 10s
      retries: 5
    volumes:
      - sessions-data:/data
    networks:
      - database

volumes:
  auth-data:
  sessions-data:
  prometheus-data:
  grafana-data:

networks:
  database:
  metrics: